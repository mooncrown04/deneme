name: Cloudstream Eklenti Derlemesi

on:
  push:
    branches:
      - main # main dalına yapılan her push'ta tetikle
      - master # Eğer projen ana dal olarak master kullanıyorsa
  pull_request:
    branches:
      - main # main dalına gelen her pull request'te tetikle
      - master # Eğer projen ana dal olarak master kullanıyorsa
  workflow_dispatch: # Bu, GitHub web arayüzünden manuel olarak çalıştırmana olanak tanır

jobs:
  build:
    runs-on: ubuntu-latest # Derleme için en son Ubuntu sürümünü kullan

    steps:
    - name: Depoyu Klonla
      uses: actions/checkout@v4 # Proje kodunu GitHub sanal makinesine çeker

    - name: JDK 17'yi Kur
      uses: actions/setup-java@v4
      with:
        java-version: '17' # Eklenti genellikle Java 17 veya daha yenisini gerektirir
        distribution: 'temurin' # Eclipse Adoptium Temurin dağıtımını kullan
        cache: 'gradle' # Gradle bağımlılıklarını önbelleğe al, sonraki derlemeleri hızlandırır

    - name: Gradle Yetkilendirme (Executable) Ver
      run: chmod +x gradlew # `gradlew` scriptini çalıştırılabilir hale getirir (Linux/macOS için)

    - name: Eklentiyi Derle (Release Modu)
      run: ./gradlew assembleRelease # Gradle ile projenin "release" sürümünü derler.
                                     # Eğer sadece birim testi yapmak istersen 'test' kullanabilirsin.
                                     # Projeye göre 'assemble' veya 'build' de olabilir.

    - name: Derlenen Dosyayı Yükle (Artifact Olarak)
      uses: actions/upload-artifact@v4 # Derlenen çıktıyı GitHub Actions "Artifacts" bölümüne yükler
      with:
        name: Cloudstream-Eklentisi # Artifact'in adı
        path: app/build/outputs/cs/*.cs # Derlenen .cs (CloudStream Bundle) dosyasının yolu.
                                        # Bu yol, projenin yapısına göre değişebilir!
        retention-days: 7 # Bu artifact'ın GitHub'da ne kadar süre saklanacağını belirler (7 gün)
